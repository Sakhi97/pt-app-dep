[{"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/index.js":"1","/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/App.js":"2","/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/reportWebVitals.js":"3","/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/Customerlist.js":"4","/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/Traininglist.js":"5","/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/AddCustomer.js":"6","/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/EditCustomer.js":"7","/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/AddTraining.js":"8","/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/Calendar.js":"9"},{"size":535,"mtime":1681819185612,"results":"10","hashOfConfig":"11"},{"size":3078,"mtime":1682840581913,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1681819185612,"results":"13","hashOfConfig":"11"},{"size":6343,"mtime":1682867706761,"results":"14","hashOfConfig":"11"},{"size":4591,"mtime":1682870992532,"results":"15","hashOfConfig":"11"},{"size":3370,"mtime":1682153530007,"results":"16","hashOfConfig":"11"},{"size":3939,"mtime":1682321532098,"results":"17","hashOfConfig":"11"},{"size":3406,"mtime":1682869529265,"results":"18","hashOfConfig":"11"},{"size":3390,"mtime":1682868431610,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"mqrhri",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/index.js",[],[],[],"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/App.js",[],[],"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/reportWebVitals.js",[],[],"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/Customerlist.js",["49"],[],"import React, { useState, useEffect } from \"react\";\n\nimport {\n  DataGrid,\n  GridToolbarContainer,\n  GridToolbarExport,\n  GridToolbarColumnsButton,\n  GridToolbarFilterButton,\n  GridToolbarDensitySelector,\n} from \"@mui/x-data-grid\";\n\nimport { Box } from '@mui/material';\nimport Button from \"@mui/material/Button\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport AddCustomer from \"./AddCustomer\";\nimport EditCustomer from \"./EditCustomer\";\nimport AddTraining from \"./AddTraining\";\nimport moment from 'moment';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\n\n\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-material.css\";\n\nfunction CustomerList() {\n  const [customers, setCustomers] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [msg, setMsg] = useState();\n  const API_URL = process.env.REACT_APP_API_URL;\n \n\n  const [columnDefs] = useState([\n    { headerName: \"First Name\", field: \"firstname\", sortable: true, filter: true, width: 140 },\n    { headerName: \"Last Name\", field: \"lastname\", sortable: true, filter: true, width: 140 },\n    { headerName: \"Address\", field: \"streetaddress\", sortable: true, filter: true, width: 140 },\n    { headerName: \"Post code\", field: \"postcode\", sortable: true, filter: true, width: 120 },\n    { headerName: \"City\", field: \"city\", sortable: true, filter: true, width: 120 },\n    { headerName: \"Email\", field: \"email\", sortable: true, filter: true, width: 160 },\n    { headerName: \"Phone\", field: \"phone\", sortable: true, filter: true, width: 160 },\n    {\n      field: \"edit\",\n      headerName: \"Edit\",\n      width: 70,\n      disableExport: true,\n      renderCell: (params) => <EditButtonCell {...params} />,\n    },\n    {\n      field: \"delete\",\n      headerName: \"Delete\",\n      width: 70,\n      disableExport: true,\n      renderCell: (params) => <DeleteButtonCell {...params} />,\n    },\n    {\n      field: \"addTraining\",\n      headerName: \"Add Training\",\n      width: 140,\n      disableExport: true,\n      renderCell: (params) => <AddTrainingButtonCell {...params} />,\n    },\n\n  ]);\n\n  function EditButtonCell(props) {\n    return (\n      <EditCustomer\n        params={props.row}\n        updateCustomer={updateCustomer}\n      >\n        <EditIcon />\n      </EditCustomer>\n    );\n  }\n  \n  function DeleteButtonCell(props) {\n    return (\n      <Button\n        size=\"small\"\n        color=\"error\"\n        onClick={() => deleteCustomer(props.row)}\n      >\n        <DeleteIcon />\n      </Button>\n    );\n  }\n  \n  function AddTrainingButtonCell(props) {\n    return (\n      <AddTraining\n        date={moment()}\n        activity=\"\"\n        duration=\"\"\n        customer={props.row.links[1].href}\n        saveTraining={addTrainingToCustomer}\n      />\n    );\n  }\n  \n\n  const deleteCustomer = (row) => {\n    if (window.confirm(\"Are you sure?\")) {\n      fetch(row.links[0].href, { method: \"DELETE\" })\n        .then((response) => {\n          if (response.ok) {\n            setMsg(\"Customer has been deleted successfully\");\n            setOpen(true);\n            getCustomers();\n          } else {\n            alert(\"Something went wrong in deletion\");\n          }\n        })\n        .catch((err) => console.error(err));\n    }\n  };\n\n  const getCustomers = () => {\n    fetch(API_URL+'/customers')\n      .then((response) => {\n        if (response.ok) return response.json();\n        else alert(\"Something went wrong in GET request\");\n      })\n      .then((data) => setCustomers(data.content))\n      .catch((err) => console.error(err));\n  };\n\n\n\n  const addCustomer = (customer) => {\n    fetch(API_URL + '/customers', {\n      method: 'POST',\n      headers: {'Content-type': 'application/json'},\n      body: JSON.stringify(customer)\n    })\n    .then(response => {\n      if (response.ok) {\n        getCustomers();\n      } else {\n        alert('Something went wrong in addition: ' + response.statusText);\n      }\n    })\n    .catch(err => console.error(err))\n  }\n  \n\n\nconst addTraining = async (training) => {\n    const response = await fetch(API_URL+'/trainings', {\n      method: \"POST\",\n      headers: { \"Content-type\": \"application/json\" },\n      body: JSON.stringify(training),\n    });\n    const data = await response.json();\n    console.log(\"API response:\", data);\n    if (response.ok) {\n      setMsg(\"Training has been added successfully\");\n      setOpen(true);\n    } else {\n      setMsg(\"Error adding training\");\n      setOpen(true);\n    }\n  };\n  \n  \n\n  const addTrainingToCustomer = async (training) => {\n    await addTraining(training);\n    getCustomers(); // Fetches updated customers data after adding a new training\n  }\n\n\n  const updateCustomer = (updatedCustomer, url) => {\n\n    fetch(url, {\n        method: 'PUT',\n        headers: {'Content-type':'application/json'},\n        body: JSON.stringify(updatedCustomer)\n    })\n    .then(response => {\n        if (response.ok) {\n            setMsg(\"Customer has been edited successfully\");\n            setOpen(true);\n            getCustomers();\n        }\n        else {\n            alert('Something went wrong when editing');\n        }\n    })\n    .catch(err => console.error(err))\n}\n\nfunction CustomToolbar() {\n  return (\n    <GridToolbarContainer>\n      <GridToolbarColumnsButton />\n      <GridToolbarFilterButton />\n      <GridToolbarDensitySelector />\n      <GridToolbarExport printOptions={{ disableToolbarButton: true }} />\n    </GridToolbarContainer>\n  );\n}\n\n  useEffect(() => {\n    getCustomers();\n  }, []);\n\n  return (\n    <>\n    <AddCustomer addCustomer={addCustomer} />\n    \n    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" width=\"100%\">\n      <Box width=\"95%\">\n        <div style={{ height: 600, width: '100%' }}>\n          <DataGrid\n            components={{ Toolbar: CustomToolbar  }}\n            rows={customers}\n            columns={columnDefs}\n            initialState={{\n              pagination: { paginationModel: { pageSize: 10 } },\n            }}\n            pagination\n            pageSize={10}\n            pageSizeOptions={[5, 10, 15]}\n            getRowId={(row) => row.email}\n          />\n        </div>\n      </Box>\n    </Box>\n      <Snackbar\n        open={open}\n        message={msg}\n        autoHideDuration={3000}\n        onClose={() => setOpen(false)}\n      />\n    </>\n  );\n}\n\nexport default CustomerList;\n\n\n\n","/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/Traininglist.js",["50"],[],"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/AddCustomer.js",[],[],"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/EditCustomer.js",[],[],"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/AddTraining.js",[],[],"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/Calendar.js",["51"],[],{"ruleId":"52","severity":1,"message":"53","line":206,"column":6,"nodeType":"54","endLine":206,"endColumn":8,"suggestions":"55"},{"ruleId":"52","severity":1,"message":"56","line":146,"column":6,"nodeType":"54","endLine":146,"endColumn":8,"suggestions":"57"},{"ruleId":"52","severity":1,"message":"58","line":19,"column":6,"nodeType":"54","endLine":19,"endColumn":8,"suggestions":"59"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCustomers'. Either include it or remove the dependency array.","ArrayExpression",["60"],"React Hook useEffect has a missing dependency: 'getTrainings'. Either include it or remove the dependency array.",["61"],"React Hook useEffect has a missing dependency: 'fetchTrainings'. Either include it or remove the dependency array.",["62"],{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [getCustomers]",{"range":"69","text":"70"},"Update the dependencies array to be: [getTrainings]",{"range":"71","text":"72"},"Update the dependencies array to be: [fetchTrainings]",{"range":"73","text":"74"},[5495,5497],"[getCustomers]",[3875,3877],"[getTrainings]",[762,764],"[fetchTrainings]"]