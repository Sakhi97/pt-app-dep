{"ast":null,"code":"import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\nvar serializeCellValue = function serializeCellValue(value, delimiterCharacter) {\n  if (typeof value === 'string') {\n    var formattedValue = value.replace(/\"/g, '\"\"');\n\n    // Make sure value containing delimiter or line break won't be split into multiple rows\n    if ([delimiterCharacter, '\\n', '\\r'].some(function (delimiter) {\n      return formattedValue.includes(delimiter);\n    })) {\n      return \"\\\"\".concat(formattedValue, \"\\\"\");\n    }\n    return formattedValue;\n  }\n  return value;\n};\nvar objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\nvar serializeRow = function serializeRow(id, columns, getCellParams, delimiterCharacter) {\n  return columns.map(function (column) {\n    var cellParams = getCellParams(id, column.field);\n    if (process.env.NODE_ENV !== 'production') {\n      if (String(cellParams.formattedValue) === '[object Object]') {\n        objectFormattedValueWarning();\n      }\n    }\n    return serializeCellValue(cellParams.formattedValue, delimiterCharacter);\n  });\n};\nexport function buildCSV(options) {\n  var columns = options.columns,\n    rowIds = options.rowIds,\n    getCellParams = options.getCellParams,\n    delimiterCharacter = options.delimiterCharacter,\n    includeHeaders = options.includeHeaders;\n  var CSVBody = rowIds.reduce(function (acc, id) {\n    return \"\".concat(acc).concat(serializeRow(id, columns, getCellParams, delimiterCharacter).join(delimiterCharacter), \"\\r\\n\");\n  }, '').trim();\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n  var CSVHead = \"\".concat(columns.filter(function (column) {\n    return column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field;\n  }).map(function (column) {\n    return serializeCellValue(column.headerName || column.field, delimiterCharacter);\n  }).join(delimiterCharacter), \"\\r\\n\");\n  return \"\".concat(CSVHead).concat(CSVBody).trim();\n}","map":{"version":3,"names":["GRID_CHECKBOX_SELECTION_COL_DEF","buildWarning","serializeCellValue","value","delimiterCharacter","formattedValue","replace","some","delimiter","includes","concat","objectFormattedValueWarning","serializeRow","id","columns","getCellParams","map","column","cellParams","field","process","env","NODE_ENV","String","buildCSV","options","rowIds","includeHeaders","CSVBody","reduce","acc","join","trim","CSVHead","filter","headerName"],"sources":["/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js"],"sourcesContent":["import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\nconst serializeCellValue = (value, delimiterCharacter) => {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"');\n\n    // Make sure value containing delimiter or line break won't be split into multiple rows\n    if ([delimiterCharacter, '\\n', '\\r'].some(delimiter => formattedValue.includes(delimiter))) {\n      return `\"${formattedValue}\"`;\n    }\n    return formattedValue;\n  }\n  return value;\n};\nconst objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\nconst serializeRow = (id, columns, getCellParams, delimiterCharacter) => columns.map(column => {\n  const cellParams = getCellParams(id, column.field);\n  if (process.env.NODE_ENV !== 'production') {\n    if (String(cellParams.formattedValue) === '[object Object]') {\n      objectFormattedValueWarning();\n    }\n  }\n  return serializeCellValue(cellParams.formattedValue, delimiterCharacter);\n});\nexport function buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    getCellParams,\n    delimiterCharacter,\n    includeHeaders\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow(id, columns, getCellParams, delimiterCharacter).join(delimiterCharacter)}\\r\\n`, '').trim();\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n  const CSVHead = `${columns.filter(column => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map(column => serializeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter)}\\r\\n`;\n  return `${CSVHead}${CSVBody}`.trim();\n}"],"mappings":"AAAA,SAASA,+BAA+B,QAAQ,oBAAoB;AACpE,SAASC,YAAY,QAAQ,2BAA2B;AACxD,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,KAAK,EAAEC,kBAAkB,EAAK;EACxD,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,IAAME,cAAc,GAAGF,KAAK,CAACG,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;;IAEhD;IACA,IAAI,CAACF,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,CAACG,IAAI,CAAC,UAAAC,SAAS;MAAA,OAAIH,cAAc,CAACI,QAAQ,CAACD,SAAS,CAAC;IAAA,EAAC,EAAE;MAC1F,YAAAE,MAAA,CAAWL,cAAc;IAC3B;IACA,OAAOA,cAAc;EACvB;EACA,OAAOF,KAAK;AACd,CAAC;AACD,IAAMQ,2BAA2B,GAAGV,YAAY,CAAC,CAAC,kIAAkI,EAAE,6EAA6E,CAAC,CAAC;AACrQ,IAAMW,YAAY,GAAG,SAAfA,YAAYA,CAAIC,EAAE,EAAEC,OAAO,EAAEC,aAAa,EAAEX,kBAAkB;EAAA,OAAKU,OAAO,CAACE,GAAG,CAAC,UAAAC,MAAM,EAAI;IAC7F,IAAMC,UAAU,GAAGH,aAAa,CAACF,EAAE,EAAEI,MAAM,CAACE,KAAK,CAAC;IAClD,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAIC,MAAM,CAACL,UAAU,CAACb,cAAc,CAAC,KAAK,iBAAiB,EAAE;QAC3DM,2BAA2B,EAAE;MAC/B;IACF;IACA,OAAOT,kBAAkB,CAACgB,UAAU,CAACb,cAAc,EAAED,kBAAkB,CAAC;EAC1E,CAAC,CAAC;AAAA;AACF,OAAO,SAASoB,QAAQA,CAACC,OAAO,EAAE;EAChC,IACEX,OAAO,GAKLW,OAAO,CALTX,OAAO;IACPY,MAAM,GAIJD,OAAO,CAJTC,MAAM;IACNX,aAAa,GAGXU,OAAO,CAHTV,aAAa;IACbX,kBAAkB,GAEhBqB,OAAO,CAFTrB,kBAAkB;IAClBuB,cAAc,GACZF,OAAO,CADTE,cAAc;EAEhB,IAAMC,OAAO,GAAGF,MAAM,CAACG,MAAM,CAAC,UAACC,GAAG,EAAEjB,EAAE;IAAA,UAAAH,MAAA,CAAQoB,GAAG,EAAApB,MAAA,CAAGE,YAAY,CAACC,EAAE,EAAEC,OAAO,EAAEC,aAAa,EAAEX,kBAAkB,CAAC,CAAC2B,IAAI,CAAC3B,kBAAkB,CAAC;EAAA,CAAM,EAAE,EAAE,CAAC,CAAC4B,IAAI,EAAE;EAC3J,IAAI,CAACL,cAAc,EAAE;IACnB,OAAOC,OAAO;EAChB;EACA,IAAMK,OAAO,MAAAvB,MAAA,CAAMI,OAAO,CAACoB,MAAM,CAAC,UAAAjB,MAAM;IAAA,OAAIA,MAAM,CAACE,KAAK,KAAKnB,+BAA+B,CAACmB,KAAK;EAAA,EAAC,CAACH,GAAG,CAAC,UAAAC,MAAM;IAAA,OAAIf,kBAAkB,CAACe,MAAM,CAACkB,UAAU,IAAIlB,MAAM,CAACE,KAAK,EAAEf,kBAAkB,CAAC;EAAA,EAAC,CAAC2B,IAAI,CAAC3B,kBAAkB,CAAC,SAAM;EAC3N,OAAO,GAAAM,MAAA,CAAGuB,OAAO,EAAAvB,MAAA,CAAGkB,OAAO,EAAGI,IAAI,EAAE;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}