{"ast":null,"code":"var _jsxFileName = \"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/Traininglist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport dayjs from \"dayjs\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-material.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Traininglist() {\n  _s();\n  const [trainings, setTrainings] = useState([]);\n  const [columnDefs] = useState([{\n    headerName: \"Date\",\n    field: \"date\",\n    sortable: true,\n    filter: true,\n    valueFormatter: params => dayjs(params.value).format(\"DD.MM.YYYY HH:mm\")\n  }, {\n    headerName: \"Duration\",\n    field: \"duration\",\n    sortable: true,\n    filter: true\n  }, {\n    headerName: \"Activity\",\n    field: \"activity\",\n    sortable: true,\n    filter: true\n  }, {\n    headerName: \"Customer\",\n    field: \"customer\",\n    sortable: true,\n    filter: true\n  }]);\n  const getTrainings = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/trainings`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch trainings data: ${response.statusText}`);\n      }\n      const data = await response.json();\n      const trainingsWithCustomer = await Promise.all(data.content.map(async training => {\n        var _training$links$find;\n        const customerUrl = (_training$links$find = training.links.find(link => link.rel === \"customer\")) === null || _training$links$find === void 0 ? void 0 : _training$links$find.href;\n        if (!customerUrl) {\n          throw new Error(`Failed to find customer URL for training: ${training}`);\n        }\n        const customerResponse = await fetch(customerUrl);\n        if (!customerResponse.ok) {\n          throw new Error(`Failed to fetch customer data for training: ${training}`);\n        }\n        const customerData = await customerResponse.json();\n        const customerName = `${customerData.firstname} ${customerData.lastname}`;\n        return {\n          ...training,\n          customer: customerName\n        };\n      }));\n      setTrainings(trainingsWithCustomer);\n    } catch (error) {\n      console.error(\"Error fetching trainings:\", error);\n    }\n  };\n  useEffect(() => {\n    getTrainings();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ag-theme-material\",\n      style: {\n        width: \"80%\",\n        height: 600,\n        margin: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n        rowData: trainings,\n        columnDefs: columnDefs,\n        pagination: true,\n        paginationPageSize: 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Traininglist, \"N+9A/f2s9/lMdzQR8rjcz00+n+g=\");\n_c = Traininglist;\nexport default Traininglist;\nvar _c;\n$RefreshReg$(_c, \"Traininglist\");","map":{"version":3,"names":["React","useState","useEffect","AgGridReact","dayjs","jsxDEV","_jsxDEV","Fragment","_Fragment","Traininglist","_s","trainings","setTrainings","columnDefs","headerName","field","sortable","filter","valueFormatter","params","value","format","getTrainings","response","fetch","process","env","REACT_APP_API_URL","ok","Error","statusText","data","json","trainingsWithCustomer","Promise","all","content","map","training","_training$links$find","customerUrl","links","find","link","rel","href","customerResponse","customerData","customerName","firstname","lastname","customer","error","console","children","className","style","width","height","margin","rowData","pagination","paginationPageSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/src/components/Traininglist.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport dayjs from \"dayjs\";\n\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-material.css\";\n\nfunction Traininglist() {\n  const [trainings, setTrainings] = useState([]);\n\n  const [columnDefs] = useState([\n    {\n      headerName: \"Date\",\n      field: \"date\",\n      sortable: true,\n      filter: true,\n      valueFormatter: (params) => dayjs(params.value).format(\"DD.MM.YYYY HH:mm\"),\n    },\n    { headerName: \"Duration\", field: \"duration\", sortable: true, filter: true },\n    { headerName: \"Activity\", field: \"activity\", sortable: true, filter: true },\n    { headerName: \"Customer\", field: \"customer\", sortable: true, filter: true },\n  ]);\n\n  const getTrainings = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/trainings`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch trainings data: ${response.statusText}`);\n      }\n      const data = await response.json();\n      const trainingsWithCustomer = await Promise.all(\n        data.content.map(async (training) => {\n          const customerUrl = training.links.find((link) => link.rel === \"customer\")?.href;\n          if (!customerUrl) {\n            throw new Error(`Failed to find customer URL for training: ${training}`);\n          }\n          const customerResponse = await fetch(customerUrl);\n          if (!customerResponse.ok) {\n            throw new Error(`Failed to fetch customer data for training: ${training}`);\n          }\n          const customerData = await customerResponse.json();\n          const customerName = `${customerData.firstname} ${customerData.lastname}`;\n          return { ...training, customer: customerName };\n        })\n      );\n      setTrainings(trainingsWithCustomer);\n    } catch (error) {\n      console.error(\"Error fetching trainings:\", error);\n    }\n  };\n  \n  useEffect(() => {\n    getTrainings();\n  }, []);\n\n  return (\n    <>\n      <div className=\"ag-theme-material\" style={{ width: \"80%\", height: 600, margin: \"auto\" }}>\n        <AgGridReact rowData={trainings} columnDefs={columnDefs} pagination={true} paginationPageSize={10} />\n      </div>\n    </>\n  );\n}\n\nexport default Traininglist;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}