{"ast":null,"code":"import _slicedToArray from \"/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_debounce as debounce, unstable_capitalize as capitalize } from '@mui/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortModelSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from '../../../DataGrid/useDataGridProps';\nexport var rowsMetaStateInitializer = function rowsMetaStateInitializer(state) {\n  return _extends({}, state, {\n    rowsMeta: {\n      currentPageTotalHeight: 0,\n      positions: []\n    }\n  });\n};\nvar warnedOnceInvalidRowHeight = false;\nvar getValidRowHeight = function getValidRowHeight(rowHeightProp, defaultRowHeight, warningMessage) {\n  if (typeof rowHeightProp === 'number' && rowHeightProp > 0) {\n    return rowHeightProp;\n  }\n  if (process.env.NODE_ENV !== 'production' && !warnedOnceInvalidRowHeight && typeof rowHeightProp !== 'undefined' && rowHeightProp !== null) {\n    console.warn(warningMessage);\n    warnedOnceInvalidRowHeight = true;\n  }\n  return defaultRowHeight;\n};\nvar rowHeightWarning = [\"MUI: The `rowHeight` prop should be a number greater than 0.\", \"The default value will be used instead.\"].join('\\n');\nvar getRowHeightWarning = [\"MUI: The `getRowHeight` prop should return a number greater than 0 or 'auto'.\", \"The default value will be used instead.\"].join('\\n');\n\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\nexport var useGridRowsMeta = function useGridRowsMeta(apiRef, props) {\n  var getRowHeightProp = props.getRowHeight,\n    getRowSpacing = props.getRowSpacing,\n    getEstimatedRowHeight = props.getEstimatedRowHeight;\n  var rowsHeightLookup = React.useRef({});\n\n  // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n  var lastMeasuredRowIndex = React.useRef(-1);\n  var hasRowWithAutoHeight = React.useRef(false);\n  var densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  var filterModel = useGridSelector(apiRef, gridFilterModelSelector);\n  var paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  var sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  var currentPage = useGridVisibleRows(apiRef, props);\n  var pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  var validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  var rowHeight = Math.floor(validRowHeight * densityFactor);\n  var hydrateRowsMeta = React.useCallback(function () {\n    var _pinnedRows$top, _pinnedRows$bottom;\n    hasRowWithAutoHeight.current = false;\n    var calculateRowProcessedSizes = function calculateRowProcessedSizes(row) {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeight\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n        };\n      }\n\n      var _rowsHeightLookup$cur3 = rowsHeightLookup.current[row.id],\n        isResized = _rowsHeightLookup$cur3.isResized,\n        needsFirstMeasurement = _rowsHeightLookup$cur3.needsFirstMeasurement,\n        sizes = _rowsHeightLookup$cur3.sizes;\n      var baseRowHeight = typeof rowHeight === 'number' && rowHeight > 0 ? rowHeight : 52;\n      var existingBaseRowHeight = sizes.baseCenter;\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        var rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor: densityFactor\n        }));\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            var estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor: densityFactor\n            })) : rowHeight;\n\n            // If the row was not measured yet use the estimated row height\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeight;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns invalid value.\n          baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n      var existingBaseSizes = Object.entries(sizes).reduce(function (acc, _ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          size = _ref2[1];\n        if (/^base[A-Z]/.test(key)) {\n          acc[key] = size;\n        }\n        return acc;\n      }, {});\n\n      // We use an object to make simple to check if a height is already added or not\n      var initialHeights = _extends({}, existingBaseSizes, {\n        baseCenter: baseRowHeight\n      });\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n        var indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        var spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage: indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n      var processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n    var positions = [];\n    var currentPageTotalHeight = currentPage.rows.reduce(function (acc, row) {\n      positions.push(acc);\n      var maximumBaseSize = 0;\n      var otherSizes = 0;\n      var processedSizes = calculateRowProcessedSizes(row);\n      Object.entries(processedSizes).forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          size = _ref4[0],\n          value = _ref4[1];\n        if (/^base[A-Z]/.test(size)) {\n          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;\n        } else {\n          otherSizes += value;\n        }\n      });\n      return acc + maximumBaseSize + otherSizes;\n    }, 0);\n    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(function (row) {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(function (row) {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight: currentPageTotalHeight,\n          positions: positions\n        }\n      });\n    });\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);\n  var getRowHeight = React.useCallback(function (rowId) {\n    var height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeight;\n  }, [rowHeight]);\n  var getRowInternalSizes = function getRowInternalSizes(rowId) {\n    var _rowsHeightLookup$cur;\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n  var setRowHeight = React.useCallback(function (id, height) {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  var debouncedHydrateRowsMeta = React.useMemo(function () {\n    return debounce(hydrateRowsMeta);\n  }, [hydrateRowsMeta]);\n  var storeMeasuredRowHeight = React.useCallback(function (id, height, position) {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    }\n\n    // Only trigger hydration if the value is different, otherwise we trigger a loop\n    var needsHydration = rowsHeightLookup.current[id].sizes[\"base\".concat(capitalize(position))] !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes[\"base\".concat(capitalize(position))] = height;\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  var rowHasAutoHeight = React.useCallback(function (id) {\n    var _rowsHeightLookup$cur2;\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  var getLastMeasuredRowIndex = React.useCallback(function () {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  var setLastMeasuredRowIndex = React.useCallback(function (index) {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  var resetRowHeights = React.useCallback(function () {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n\n  // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n  React.useEffect(function () {\n    hydrateRowsMeta();\n  }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  var rowsMetaApi = {\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights: resetRowHeights\n  };\n  var rowsMetaPrivateApi = {\n    getLastMeasuredRowIndex: getLastMeasuredRowIndex,\n    rowHasAutoHeight: rowHasAutoHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'public');\n  useGridApiMethod(apiRef, rowsMetaPrivateApi, 'private');\n};","map":{"version":3,"names":["_extends","React","unstable_debounce","debounce","unstable_capitalize","capitalize","useGridVisibleRows","useGridApiMethod","useGridSelector","gridDensityFactorSelector","gridFilterModelSelector","gridPaginationSelector","gridSortModelSelector","useGridRegisterPipeApplier","gridPinnedRowsSelector","DATA_GRID_PROPS_DEFAULT_VALUES","rowsMetaStateInitializer","state","rowsMeta","currentPageTotalHeight","positions","warnedOnceInvalidRowHeight","getValidRowHeight","rowHeightProp","defaultRowHeight","warningMessage","process","env","NODE_ENV","console","warn","rowHeightWarning","join","getRowHeightWarning","useGridRowsMeta","apiRef","props","getRowHeightProp","getRowHeight","getRowSpacing","getEstimatedRowHeight","rowsHeightLookup","useRef","lastMeasuredRowIndex","hasRowWithAutoHeight","densityFactor","filterModel","paginationState","sortModel","currentPage","pinnedRows","validRowHeight","rowHeight","Math","floor","hydrateRowsMeta","useCallback","_pinnedRows$top","_pinnedRows$bottom","current","calculateRowProcessedSizes","row","id","sizes","baseCenter","isResized","autoHeight","needsFirstMeasurement","_rowsHeightLookup$cur3","baseRowHeight","existingBaseRowHeight","rowHeightFromUser","estimatedRowHeight","existingBaseSizes","Object","entries","reduce","acc","_ref","_ref2","_slicedToArray","key","size","test","initialHeights","_spacing$top","_spacing$bottom","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","rows","length","spacingTop","top","spacingBottom","bottom","processedSizes","unstable_applyPipeProcessors","push","maximumBaseSize","otherSizes","forEach","_ref3","_ref4","value","setState","Infinity","forceUpdate","rowId","height","getRowInternalSizes","_rowsHeightLookup$cur","setRowHeight","debouncedHydrateRowsMeta","useMemo","storeMeasuredRowHeight","position","needsHydration","concat","rowHasAutoHeight","_rowsHeightLookup$cur2","getLastMeasuredRowIndex","setLastMeasuredRowIndex","index","resetRowHeights","useEffect","rowsMetaApi","unstable_setLastMeasuredRowIndex","unstable_getRowHeight","unstable_getRowInternalSizes","unstable_setRowHeight","unstable_storeRowHeightMeasurement","rowsMetaPrivateApi"],"sources":["/Users/sakhiahmad/Desktop/Uni/Front-end/pt-app/ptapp/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_debounce as debounce, unstable_capitalize as capitalize } from '@mui/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortModelSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from '../../../DataGrid/useDataGridProps';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\nlet warnedOnceInvalidRowHeight = false;\nconst getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {\n  if (typeof rowHeightProp === 'number' && rowHeightProp > 0) {\n    return rowHeightProp;\n  }\n  if (process.env.NODE_ENV !== 'production' && !warnedOnceInvalidRowHeight && typeof rowHeightProp !== 'undefined' && rowHeightProp !== null) {\n    console.warn(warningMessage);\n    warnedOnceInvalidRowHeight = true;\n  }\n  return defaultRowHeight;\n};\nconst rowHeightWarning = [`MUI: The \\`rowHeight\\` prop should be a number greater than 0.`, `The default value will be used instead.`].join('\\n');\nconst getRowHeightWarning = [`MUI: The \\`getRowHeight\\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join('\\n');\n\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef({});\n\n  // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(validRowHeight * densityFactor);\n  const hydrateRowsMeta = React.useCallback(() => {\n    var _pinnedRows$top, _pinnedRows$bottom;\n    hasRowWithAutoHeight.current = false;\n    const calculateRowProcessedSizes = row => {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeight\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = typeof rowHeight === 'number' && rowHeight > 0 ? rowHeight : 52;\n      const existingBaseRowHeight = sizes.baseCenter;\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeight;\n\n            // If the row was not measured yet use the estimated row height\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeight;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns invalid value.\n          baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n      const existingBaseSizes = Object.entries(sizes).reduce((acc, [key, size]) => {\n        if (/^base[A-Z]/.test(key)) {\n          acc[key] = size;\n        }\n        return acc;\n      }, {});\n\n      // We use an object to make simple to check if a height is already added or not\n      const initialHeights = _extends({}, existingBaseSizes, {\n        baseCenter: baseRowHeight\n      });\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      let maximumBaseSize = 0;\n      let otherSizes = 0;\n      const processedSizes = calculateRowProcessedSizes(row);\n      Object.entries(processedSizes).forEach(([size, value]) => {\n        if (/^base[A-Z]/.test(size)) {\n          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;\n        } else {\n          otherSizes += value;\n        }\n      });\n      return acc + maximumBaseSize + otherSizes;\n    }, 0);\n    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeight;\n  }, [rowHeight]);\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height, position) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    }\n\n    // Only trigger hydration if the value is different, otherwise we trigger a loop\n    const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] = height;\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  const resetRowHeights = React.useCallback(() => {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n\n  // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights\n  };\n  const rowsMetaPrivateApi = {\n    getLastMeasuredRowIndex,\n    rowHasAutoHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'public');\n  useGridApiMethod(apiRef, rowsMetaPrivateApi, 'private');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}